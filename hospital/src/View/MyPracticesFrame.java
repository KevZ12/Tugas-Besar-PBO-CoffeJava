/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import controller.AppointmentController;
import controller.AdminController;
import controller.MyPracticesController;
import DashBoard.DoctorDashBoard;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.stream.Collectors;
import javax.swing.event.ListSelectionEvent;
import model.Appointment;
import model.Doctor;
import model.Patient;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import Dao.MyPracticesDao;
import java.util.HashSet;
import java.util.Map;

/**
 *
 * @author adibf
 */
public class MyPracticesFrame extends javax.swing.JFrame {
    
    Doctor doctor;
    MyPracticesDao myPracticesDao;
    MyPracticesController myPracticesController;
    List<Map<String, Object>> appointments;
    List<Map<String, Object>> patients;
    ListSelectionEvent event;
    

    /**
     * Creates new form MyPracticesFrame
     */
    public MyPracticesFrame(Doctor doctor) {
        
            initComponents();
            this.doctor = doctor;
            this.myPracticesController = new MyPracticesController();
            this.myPracticesDao = new MyPracticesDao();
            
            TableAppointment.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
        if (!event.getValueIsAdjusting()) {
            int selectedAppointment = TableAppointment.getSelectedRow();
            if (selectedAppointment != -1) {
                int selectedId = (int) TableAppointment.getValueAt(selectedAppointment, 0);
                try {
                    patients = myPracticesController.getAllPatients(selectedId);
                    loadTablePatient(patients);
                } catch (SQLException ex) {
                    Logger.getLogger(MyPracticesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    });
           
            
            
            
            DefaultTableModel tableAppointmentModel = (DefaultTableModel) TableAppointment.getModel();
            try {
                appointments = myPracticesController.getAllMyPractices(doctor.getDoctorId());
                loadTableAppointment(appointments);
            } catch (SQLException ex) {
                Logger.getLogger(MyPracticesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultTableModel tablePatientModel = (DefaultTableModel) TablePatient.getModel();
            
        try {
        patients = myPracticesController.getAllPatients(chooseAppointment(event));
            loadTablePatient(patients);
        } catch (SQLException ex) {
            Logger.getLogger(MyPracticesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableAppointment = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePatient = new javax.swing.JTable();
        ButtonBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 128, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("My Practices");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        TableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment Id", "Date", "Start", "End", "Room"
            }
        ));
        jScrollPane2.setViewportView(TableAppointment);

        TablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient's ID", "Patient's Name"
            }
        ));
        jScrollPane1.setViewportView(TablePatient);

        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonBack)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        DoctorDashBoard doctorDashBoard = new DoctorDashBoard(doctor);
        doctorDashBoard.setLocationRelativeTo(null);
        doctorDashBoard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ButtonBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyPracticesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyPracticesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyPracticesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyPracticesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyPracticesFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JTable TableAppointment;
    private javax.swing.JTable TablePatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    
    
     private int chooseAppointment(ListSelectionEvent event){
    if (event != null && !event.getValueIsAdjusting()){
        int selectedAppointment = TableAppointment.getSelectedRow();
        int selectedId;
        if (selectedAppointment != -1){
            selectedId = (int) TableAppointment.getValueAt(selectedAppointment, 0);
            return selectedId;
        }
    }
    return 0;
}
    
    private int choosePatient(ListSelectionEvent event){
        if (!event.getValueIsAdjusting()){
            int selectedAppointment = TablePatient.getSelectedRow();
            int selectedId;
            if (selectedAppointment != -1){
                selectedId = (int) TablePatient.getValueAt(selectedAppointment, 0);
                return selectedId;
            }
        }
        return 0;
    }
    
    private void loadTableAppointment (List<Map<String, Object>> appointments){
        DefaultTableModel model = (DefaultTableModel) TableAppointment.getModel();
        model.setRowCount(0);
        for (Map<String, Object> appointment : appointments){
            model.addRow(new Object[] {
                appointment.get("AppointmentId"),
                appointment.get("Date"),
                appointment.get("Start"),
                appointment.get("End"),
                appointment.get("Room")
            });
        }
        
    }
    
    private void loadTablePatient(List<Map<String, Object>>  patients){
        DefaultTableModel model = (DefaultTableModel) TablePatient.getModel();
        model.setRowCount(0);
        for (Map<String, Object> myPatient : patients){
            model.addRow(new Object[] {
                myPatient.get("PatientId"),
                myPatient.get("PatientName")
            });
        }
    }
    
}
