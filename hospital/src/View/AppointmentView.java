/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package View;

import controller.AppointmentController;
import controller.AdminController;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.event.ListSelectionEvent;
import model.Appointment;
import model.Doctor;

/**
 *
 * @author adibf
 */
public class AppointmentView extends javax.swing.JDialog {

    AdminController adminController;
    AppointmentController control;
    List<Appointment> listAppointments;
    List<Doctor> doctors;
    ListSelectionEvent event;
    
    /**
     * Creates new form Schedule
     */
    public AppointmentView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.event = null;
        
        SpinnerDate.setModel(new javax.swing.SpinnerDateModel());
        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(SpinnerDate, "yyyy-MM-dd");
        SpinnerDate.setEditor(dateEditor);
        
        DefaultTableModel tbl_mdl = (DefaultTableModel) TableSchedule.getModel();
        this.control = new AppointmentController(this); 
        
        try {
            listAppointments = this.control.getAllAppointment();
            loadTableAppointment(listAppointments);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
        DefaultTableModel tableModel = (DefaultTableModel) TableDoctor.getModel();
        this.adminController = new AdminController();
        
        try {
            doctors = this.adminController.getAllDoctors();
            loadTableDoctor(doctors);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
        TableSchedule.getSelectionModel().addListSelectionListener((event) -> {
        this.event = event; 
        if (!event.getValueIsAdjusting()) {
            int selectedRow = TableSchedule.getSelectedRow();
            if (selectedRow != -1) {
                try {
                    int appointmentId = (int) TableSchedule.getValueAt(selectedRow, 0);
                    Appointment appointment = control.getAppointment(appointmentId);
                    populateInputFields(appointment);
                } catch (SQLException ex) {
                    Logger.getLogger(AppointmentView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSchedule = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDoctor = new javax.swing.JTable();
        labelStart = new javax.swing.JLabel();
        TextFieldStart = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TextFieldEnd = new javax.swing.JTextField();
        ButtonAdd = new javax.swing.JButton();
        ButtonUpdate = new javax.swing.JToggleButton();
        ButtonRemove = new javax.swing.JButton();
        ButtonClear = new javax.swing.JButton();
        TextFieldRoomId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        SpinnerCapacity = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        SpinnerDate = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        TextFieldDoctorId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Schedule");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        TableSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Doctor's ID", "Date", "Start", "End", "Room", "Capacity"
            }
        ));
        jScrollPane1.setViewportView(TableSchedule);

        TableDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Dostor's ID", "Doctor's Name"
            }
        ));
        jScrollPane2.setViewportView(TableDoctor);

        labelStart.setText("Enter start working hour");

        jLabel2.setText("Enter end working hour");

        ButtonAdd.setText("    Add    ");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        ButtonUpdate.setText("   Update   ");
        ButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateActionPerformed(evt);
            }
        });

        ButtonRemove.setText("  Remove  ");
        ButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveActionPerformed(evt);
            }
        });

        ButtonClear.setText("     Clear    ");
        ButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClearActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter the room's ID");

        jLabel4.setText("Capacity");

        jLabel5.setText("Date");

        jLabel6.setText("Enter Doctor's ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(TextFieldStart, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SpinnerDate)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldDoctorId))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldEnd)
                            .addComponent(TextFieldRoomId)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SpinnerCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(91, 91, 91)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ButtonClear))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ButtonUpdate)
                                .addComponent(ButtonAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldDoctorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SpinnerCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SpinnerDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelStart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonAdd)
                                .addGap(38, 38, 38)
                                .addComponent(ButtonUpdate)
                                .addGap(44, 44, 44)
                                .addComponent(ButtonRemove)
                                .addGap(33, 33, 33)
                                .addComponent(ButtonClear))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        if (!TextFieldStart.getText().isEmpty() &&
                !TextFieldEnd.getText().isEmpty() &&
                !TextFieldDoctorId.getText().isEmpty() &&
                !TextFieldRoomId.getText().isEmpty() &&
                (int)SpinnerCapacity.getValue() != 0){
            
            LocalTime start = LocalTime.parse(TextFieldStart.getText().trim());
            LocalTime end = LocalTime.parse(TextFieldEnd.getText().trim());
            int status = 0; 
            int isDone = 0;
            int capacity = (int) SpinnerCapacity.getValue();
            int room = Integer.parseInt(TextFieldRoomId.getText().trim());
            int docId = Integer.parseInt(TextFieldDoctorId.getText().trim());
            LocalDate date = LocalDate.parse(new SimpleDateFormat("yyyy-MM-dd").format(SpinnerDate.getValue()));
                    
            try {
                control.add(start, end, status, isDone, capacity, room, docId, date);
                listAppointments = control.getAllAppointment(); // Refresh the list
                loadTableAppointment(listAppointments);
            } catch (SQLException ex) {
                Logger.getLogger(AppointmentView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        loadTableAppointment(listAppointments);
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void ButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateActionPerformed
        boolean isUpdateButtonActive = true;
        int appointmentId = chooseAppointment(event);
        if (!TextFieldStart.getText().isEmpty() &&
                !TextFieldEnd.getText().isEmpty() &&
                !TextFieldDoctorId.getText().isEmpty() &&
                !TextFieldRoomId.getText().isEmpty() &&
                (int)SpinnerCapacity.getValue() != 0){
            
            LocalTime start = LocalTime.parse(TextFieldStart.getText().trim());
            LocalTime end = LocalTime.parse(TextFieldEnd.getText().trim());
            int status = 0; 
            int isDone = 0;
            int capacity = (int) SpinnerCapacity.getValue();
            int room = Integer.parseInt(TextFieldRoomId.getText().trim());
            int docId = Integer.parseInt(TextFieldDoctorId.getText().trim());
            LocalDate date = LocalDate.parse(new SimpleDateFormat("yyyy-MM-dd").format(SpinnerDate.getValue()));
            
            
            try {
                control.update(start, end, status, isDone, capacity, room, docId, date, appointmentId);
                listAppointments = control.getAllAppointment(); 
                loadTableAppointment(listAppointments);
            } catch (SQLException ex) {
                Logger.getLogger(AppointmentView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_ButtonUpdateActionPerformed

    private void ButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveActionPerformed

        try {
            control.delete();
            listAppointments = control.getAllAppointment(); 
            loadTableAppointment(listAppointments);
        } catch (SQLException ex) {
            Logger.getLogger(AppointmentView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonRemoveActionPerformed

    private void ButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClearActionPerformed
        getTextFieldDoctorId().setText("");
        getTextFieldStart().setText("");
        getTextFieldEnd().setText("");
        getTextFieldRoomId().setText("");
        getSpinnerCapacity().setValue(0);
        getSpinnerDate().setValue(new java.util.Date());
    }//GEN-LAST:event_ButtonClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AppointmentView dialog = new AppointmentView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonClear;
    private javax.swing.JButton ButtonRemove;
    private javax.swing.JToggleButton ButtonUpdate;
    private javax.swing.JSpinner SpinnerCapacity;
    private javax.swing.JSpinner SpinnerDate;
    private javax.swing.JTable TableDoctor;
    private javax.swing.JTable TableSchedule;
    private javax.swing.JTextField TextFieldDoctorId;
    private javax.swing.JTextField TextFieldEnd;
    private javax.swing.JTextField TextFieldRoomId;
    private javax.swing.JTextField TextFieldStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelStart;
    // End of variables declaration//GEN-END:variables

    
    private void loadTableDoctor(List<Doctor> doctors) {
        DefaultTableModel model = (DefaultTableModel) TableDoctor.getModel();
        model.setRowCount(0);
        for (Doctor doctor : doctors) {
            String fullName = doctor.getFirstName() + " " + doctor.getLastName();
        Object[] rowData = {doctor.getDoctorId(), fullName};
            model.addRow(rowData);
        }
    }
    
    private void loadTableAppointment(List<Appointment> appointments){
        DefaultTableModel model = (DefaultTableModel) TableSchedule.getModel();
        model.setRowCount(0);
        for (Appointment appointment : appointments){
            Object[] rowData = {appointment.getAppointmentId(), appointment.getDoctorId(), appointment.getDate(), appointment.getStart(), appointment.getEnd(), appointment.getRoomId(), appointment.getCapacity()};
            model.addRow(rowData);
        }
    }
    
    private int chooseAppointment(ListSelectionEvent event){
        if (!event.getValueIsAdjusting()){
            int selectedAppointment = TableSchedule.getSelectedRow();
            int selectedId;
            if (selectedAppointment != -1){
                selectedId = (int) TableSchedule.getValueAt(selectedAppointment, 0);
                return selectedId;
            }
        }
        return 0;
    }
    
    private void populateInputFields(Appointment appointment) {
    TextFieldDoctorId.setText(String.valueOf(appointment.getDoctorId()));
    TextFieldStart.setText(appointment.getStart().toString());
    TextFieldEnd.setText(appointment.getEnd().toString());
    TextFieldRoomId.setText(String.valueOf(appointment.getRoomId()));
    SpinnerCapacity.setValue(appointment.getCapacity());
    SpinnerDate.setValue(java.sql.Date.valueOf(appointment.getDate()));
    }

    
    public JTextField getTextFieldDoctorId(){
        return TextFieldDoctorId;
    }
    
    public JTextField getTextFieldStart() {
        return TextFieldStart;
    }

    public JTextField getTextFieldEnd() {
        return TextFieldEnd;
    }

    public JTextField getTextFieldRoomId() {
        return TextFieldRoomId;
    }

    public JSpinner getSpinnerDate() {
        return SpinnerDate;
    }

    public JSpinner getSpinnerCapacity() {
        return SpinnerCapacity;
    }

    public JTable getTableSchedule() {
        return TableSchedule;
    }

    public JTable getTableDoctor() {
        return TableDoctor;
    }

    public JButton getButtonAdd() {
        return ButtonAdd;
    }

    public JToggleButton getButtonUpdate() {
        return ButtonUpdate;
    }

    public JButton getButtonRemove() {
        return ButtonRemove;
    }

    public JButton getButtonClear() {
        return ButtonClear;
    }
}
