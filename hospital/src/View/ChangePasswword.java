/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import database.DataBaseConnection;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import model.Admin;
import model.Doctor;
import model.Patient;
import model.User;
import testingKevin.TestingAddAdminMenu;
import testingKevin.TestingAdminMenu;
import testingKevin.TestingDockterMenu;
import testingKevin.TestingPatientMenu;
import util.PasswordUtil;

/**
 *
 * @author kevin
 */
public class ChangePasswword extends javax.swing.JFrame {

    User user;

    /**
     * Creates new form ChangePasswword
     */
    public ChangePasswword(User user) {
        initComponents();
        this.user = user;

        if (user instanceof Admin) {

            jPasswordField1.setBackground(new Color(0, 51, 102));
            jPasswordField2.setBackground(new Color(0, 51, 102));
            jPasswordField3.setBackground(new Color(0, 51, 102));
            jButton1.setBackground(new Color(0, 51, 102));
            this.getContentPane().setBackground(new Color(139, 207, 255));
        }
        if (user instanceof Doctor) {
            jPasswordField1.setBackground(new Color(0, 128, 0));
            jPasswordField2.setBackground(new Color(0, 128, 0));
            jPasswordField3.setBackground(new Color(0, 128, 0));
            jButton1.setBackground(new Color(0, 128, 0));
            this.getContentPane().setBackground(new Color(155, 255, 139));

        }
        if (user instanceof Patient) {

            jPasswordField1.setBackground(new Color(255, 165, 0));
            jPasswordField2.setBackground(new Color(255, 165, 0));
            jPasswordField3.setBackground(new Color(255, 165, 0));
            jButton1.setBackground(new Color(255, 165, 0));
            this.getContentPane().setBackground(new Color(255, 215, 0));

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jPasswordField3 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        jPasswordField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Change Password");

        jButton1.setText("Change Password");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("enter your current password");

        jLabel3.setText("enter your new password");

        jLabel4.setText("retype enter your new password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPasswordField3, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                .addComponent(jPasswordField1)
                                .addComponent(jPasswordField2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jButton1)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField3ActionPerformed

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String salt = "";
        String password = "";
        String newPassword = jPasswordField1.getText();
        if (!jPasswordField1.getText().equals(jPasswordField3.getText())) {
            JOptionPane.showMessageDialog(null, "new password and retype new passord does not match.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jPasswordField1.getText().length() < 5) {
            JOptionPane.showMessageDialog(null, "new password less than 5", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (user instanceof Patient) {
            Patient patient = (Patient) user;
            String query = "SELECT password, salt FROM patients WHERE PatientId = ?";
            try (Connection connection = DataBaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query)) {

                statement.setInt(1, patient.getPatientId()); 

                try (ResultSet resultSet = statement.executeQuery();) {
                    if (resultSet.next()) {
                        password = resultSet.getString("password");
                        salt = resultSet.getString("salt");

                    }

                }

                if (PasswordUtil.comparePassword(jPasswordField2.getText(), password, salt)) {
                    String newSalt = PasswordUtil.getSalt();
                    String newHashedPassword = PasswordUtil.hashPassword(newPassword, newSalt);
                    String updateQuery = "UPDATE patients SET password = ?, salt = ? WHERE PatientId = ?";
                    try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                        updateStatement.setString(1, newHashedPassword);
                        updateStatement.setString(2, newSalt);
                        updateStatement.setInt(3, patient.getPatientId());

                        int rowsUpdated = updateStatement.executeUpdate();
                        if (rowsUpdated > 0) {
                            JOptionPane.showMessageDialog(null, "password update successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                            
                        } else {
                            JOptionPane.showMessageDialog(null, "password update failed!", "Input Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "password does not match.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            TestingPatientMenu testingPatientMenu = new TestingPatientMenu(patient);
            testingPatientMenu.setLocationRelativeTo(null);
            testingPatientMenu.setVisible(true);
            this.dispose();
        }

        if (user instanceof Doctor) {
            Doctor doctor = (Doctor) user;
            String query = "SELECT password, salt FROM doctors WHERE DoctorId = ?";
            
            try (Connection connection = DataBaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query)) {
                
                statement.setInt(1, doctor.getDoctorId()); 

                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        password = resultSet.getString("password");
                        salt = resultSet.getString("salt");
                    }
                }

                if (PasswordUtil.comparePassword(jPasswordField2.getText(), password, salt)) {
                    String newSalt = PasswordUtil.getSalt();
                    String newHashedPassword = PasswordUtil.hashPassword(newPassword, newSalt);
                    String updateQuery = "UPDATE doctors SET password = ?, salt = ? WHERE DoctorId = ?";
                    try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                        updateStatement.setString(1, newHashedPassword);
                        updateStatement.setString(2, newSalt);
                        updateStatement.setInt(3, doctor.getDoctorId());

                        int rowsUpdated = updateStatement.executeUpdate();
                        if (rowsUpdated > 0) {
                            System.out.println("Password updated successfully.");
                        } else {
                            System.out.println("Password update failed.");
                        }
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Password does not match.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            TestingDockterMenu testingDockterMenu = new TestingDockterMenu(doctor);
            testingDockterMenu.setLocationRelativeTo(null);
            testingDockterMenu.setVisible(true);
            this.dispose();
        }

        if (user instanceof Admin) {
            Admin admin = (Admin) user;
            String query = "SELECT password, salt FROM admins WHERE AdminId = ?";
            
            try (Connection connection = DataBaseConnection.getConnection(); PreparedStatement statement = connection.prepareStatement(query)) {
               
                statement.setInt(1, admin.getAdminId()); 

                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        password = resultSet.getString("password");
                        salt = resultSet.getString("salt");
                    }
                }

                if (PasswordUtil.comparePassword(jPasswordField2.getText(), password, salt)) {
                    String newSalt = PasswordUtil.getSalt();
                    String newHashedPassword = PasswordUtil.hashPassword(newPassword, newSalt);
                    String updateQuery = "UPDATE admins SET password = ?, salt = ? WHERE AdminId = ?";
                    try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                        updateStatement.setString(1, newHashedPassword);
                        updateStatement.setString(2, newSalt);
                        updateStatement.setInt(3, admin.getAdminId());

                        int rowsUpdated = updateStatement.executeUpdate();
                        if (rowsUpdated > 0) {
                            System.out.println("Password updated successfully.");
                        } else {
                            System.out.println("Password update failed.");
                        }
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Password does not match.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            TestingAdminMenu testingAddAdminMenu = new TestingAdminMenu(admin);
            testingAddAdminMenu.setLocationRelativeTo(null);
            testingAddAdminMenu.setVisible(true);
            this.dispose();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangePasswword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangePasswword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangePasswword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangePasswword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangePasswword(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JPasswordField jPasswordField3;
    // End of variables declaration//GEN-END:variables
}
